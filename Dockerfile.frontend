# Dockerfile pour Frontend React - AGRIA Hub Production
# Multi-stage build pour optimiser la taille et la sécurité

# Stage 1: Build
FROM node:18-alpine AS builder

# Installer les dépendances système nécessaires
RUN apk add --no-cache git

WORKDIR /app

# Copier les fichiers de configuration
COPY frontend/package*.json ./
COPY frontend/tsconfig.json ./
COPY frontend/vite.config.ts ./

# Installer toutes les dépendances (y compris devDependencies pour le build)
RUN npm install --silent

# Copier le code source
COPY frontend/ ./

# Variables d'environnement pour le build
ARG VITE_API_BASE_URL=/api
ARG NODE_ENV=production
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV NODE_ENV=$NODE_ENV

# Build de production optimisé
RUN npm run build

# Stage 2: Production avec Nginx
FROM nginx:1.25-alpine

# Installer curl pour les health checks
RUN apk add --no-cache curl

# Copier la configuration Nginx optimisée
COPY config/nginx.conf /etc/nginx/nginx.conf

# Créer un utilisateur non-root pour nginx
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-user -g nginx-user nginx-user

# Copier les fichiers buildés
COPY --from=builder --chown=nginx-user:nginx-user /app/dist /usr/share/nginx/html

# Créer les répertoires nécessaires avec les bonnes permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx-user:nginx-user /var/cache/nginx /var/log/nginx /var/run /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Exposer le port
EXPOSE 8080

# Healthcheck amélioré
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Utiliser l'utilisateur non-root
USER nginx-user

# Démarrer Nginx
CMD ["nginx", "-g", "daemon off;"]
